//queue
class MyQueue {
    
    public int[] arr ;
    public int size=10;
    public int front=0;
    public int rear=0;
    

    public MyQueue() {
        this.arr = new int[size];
    }
    
    public void push(int x) {
        arr[rear]=x;
        rear++;
    }
    
    public int pop() {
        int ans = arr[front];
        front++;
        return ans;
    }
    
    public int peek() {
        return arr[front];
    }
    
    public boolean empty() {
        return rear-front==0;
    }
}
//circular queue
class MyCircularQueue {
    int capacity;
    int front;
    int rear;
    int[] queue;
    int num;
    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        capacity = k;
        queue = new int[k];
        rear = -1;
        front = 0;
        num = 0;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(isFull()) return false;
        rear= (rear+1)%capacity;
        queue[rear] = value;
        num++;
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(isEmpty()) return false;
        front = (front+1)%capacity;
        num--;
        return true;
            
    }
    
    /** Get the front item from the queue. */
    public int Front() {
        if(isEmpty())
            return -1;
        return queue[front];       
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
        if(isEmpty())
            return -1;
        return queue[rear];
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
          return num == 0;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return num == capacity;
    }
}
