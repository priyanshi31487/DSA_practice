//sort colors
class Solution {
    public void sortColors(int[] nums) {
        int low=0,mid=0,high=len(nums)-1;
        while(mid<=high){
            if (nums[mid]==0){
                nums[low],nums[mid]=nums[mid],nums[low] ;
                low+=1;
                mid+=1;
            }
            else if (nums[mid]==2){
                nums[high],nums[mid]=nums[mid],nums[high] ;
                high-=1;
            }
            else {
                mid+=1;
            }
         }
    }
}
//single number3
class Solution {
    public int[] singleNumber(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        int[] ans = new int[2];
        for(int num : nums) {
            if(map.containsKey(num)) map.put(num, map.get(num)+1);
            else map.put(num, 1);
        }
        ArrayList<Integer> arr = new ArrayList<>();
        for(int num : nums) {
            if(map.get(num) == 1) arr.add(num);
        }
        ans[0] = arr.get(0);
        ans[1] = arr.get(1);
        return ans;
    }
}
//Check Arithmetic Progression :
class Solution
{
    boolean checkIsAP(int arr[] ,int n)
    {
        // code here
        if (n==1){
            return true;
        }
      Arrays.sort(arr);
      int d=arr[1]-arr[0];
      for (int i=2;i<n;i++)
          if (arr[i]-arr[i-1]!=d)
          return false;
         
         return true;
      
    
    }
}
//Group Anagrams
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> keyToAnagrams = new HashMap<>();

    for (final String str : strs) {
      char[] chars = str.toCharArray();
      Arrays.sort(chars);
      String key = String.valueOf(chars);
      keyToAnagrams.computeIfAbsent(key, k -> new ArrayList<>()).add(str);
    }

    return new ArrayList<>(keyToAnagrams.values());
    }
}
